
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `DonationProof` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model DonationProof
 * 
 */
export type DonationProofModel = runtime.Types.Result.DefaultSelection<Prisma.$DonationProofPayload>

export type AggregateDonationProof = {
  _count: DonationProofCountAggregateOutputType | null
  _avg: DonationProofAvgAggregateOutputType | null
  _sum: DonationProofSumAggregateOutputType | null
  _min: DonationProofMinAggregateOutputType | null
  _max: DonationProofMaxAggregateOutputType | null
}

export type DonationProofAvgAggregateOutputType = {
  fileSize: number | null
}

export type DonationProofSumAggregateOutputType = {
  fileSize: number | null
}

export type DonationProofMinAggregateOutputType = {
  id: string | null
  donationId: string | null
  imagePath: string | null
  imageName: string | null
  fileSize: number | null
  uploadedAt: Date | null
}

export type DonationProofMaxAggregateOutputType = {
  id: string | null
  donationId: string | null
  imagePath: string | null
  imageName: string | null
  fileSize: number | null
  uploadedAt: Date | null
}

export type DonationProofCountAggregateOutputType = {
  id: number
  donationId: number
  imagePath: number
  imageName: number
  fileSize: number
  uploadedAt: number
  _all: number
}


export type DonationProofAvgAggregateInputType = {
  fileSize?: true
}

export type DonationProofSumAggregateInputType = {
  fileSize?: true
}

export type DonationProofMinAggregateInputType = {
  id?: true
  donationId?: true
  imagePath?: true
  imageName?: true
  fileSize?: true
  uploadedAt?: true
}

export type DonationProofMaxAggregateInputType = {
  id?: true
  donationId?: true
  imagePath?: true
  imageName?: true
  fileSize?: true
  uploadedAt?: true
}

export type DonationProofCountAggregateInputType = {
  id?: true
  donationId?: true
  imagePath?: true
  imageName?: true
  fileSize?: true
  uploadedAt?: true
  _all?: true
}

export type DonationProofAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DonationProof to aggregate.
   */
  where?: Prisma.DonationProofWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DonationProofs to fetch.
   */
  orderBy?: Prisma.DonationProofOrderByWithRelationInput | Prisma.DonationProofOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DonationProofWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DonationProofs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DonationProofs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned DonationProofs
  **/
  _count?: true | DonationProofCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: DonationProofAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: DonationProofSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DonationProofMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DonationProofMaxAggregateInputType
}

export type GetDonationProofAggregateType<T extends DonationProofAggregateArgs> = {
      [P in keyof T & keyof AggregateDonationProof]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDonationProof[P]>
    : Prisma.GetScalarType<T[P], AggregateDonationProof[P]>
}




export type DonationProofGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DonationProofWhereInput
  orderBy?: Prisma.DonationProofOrderByWithAggregationInput | Prisma.DonationProofOrderByWithAggregationInput[]
  by: Prisma.DonationProofScalarFieldEnum[] | Prisma.DonationProofScalarFieldEnum
  having?: Prisma.DonationProofScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DonationProofCountAggregateInputType | true
  _avg?: DonationProofAvgAggregateInputType
  _sum?: DonationProofSumAggregateInputType
  _min?: DonationProofMinAggregateInputType
  _max?: DonationProofMaxAggregateInputType
}

export type DonationProofGroupByOutputType = {
  id: string
  donationId: string
  imagePath: string
  imageName: string
  fileSize: number
  uploadedAt: Date
  _count: DonationProofCountAggregateOutputType | null
  _avg: DonationProofAvgAggregateOutputType | null
  _sum: DonationProofSumAggregateOutputType | null
  _min: DonationProofMinAggregateOutputType | null
  _max: DonationProofMaxAggregateOutputType | null
}

type GetDonationProofGroupByPayload<T extends DonationProofGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DonationProofGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DonationProofGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DonationProofGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DonationProofGroupByOutputType[P]>
      }
    >
  >



export type DonationProofWhereInput = {
  AND?: Prisma.DonationProofWhereInput | Prisma.DonationProofWhereInput[]
  OR?: Prisma.DonationProofWhereInput[]
  NOT?: Prisma.DonationProofWhereInput | Prisma.DonationProofWhereInput[]
  id?: Prisma.StringFilter<"DonationProof"> | string
  donationId?: Prisma.StringFilter<"DonationProof"> | string
  imagePath?: Prisma.StringFilter<"DonationProof"> | string
  imageName?: Prisma.StringFilter<"DonationProof"> | string
  fileSize?: Prisma.IntFilter<"DonationProof"> | number
  uploadedAt?: Prisma.DateTimeFilter<"DonationProof"> | Date | string
  donation?: Prisma.XOR<Prisma.DonationScalarRelationFilter, Prisma.DonationWhereInput>
}

export type DonationProofOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  donationId?: Prisma.SortOrder
  imagePath?: Prisma.SortOrder
  imageName?: Prisma.SortOrder
  fileSize?: Prisma.SortOrder
  uploadedAt?: Prisma.SortOrder
  donation?: Prisma.DonationOrderByWithRelationInput
}

export type DonationProofWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.DonationProofWhereInput | Prisma.DonationProofWhereInput[]
  OR?: Prisma.DonationProofWhereInput[]
  NOT?: Prisma.DonationProofWhereInput | Prisma.DonationProofWhereInput[]
  donationId?: Prisma.StringFilter<"DonationProof"> | string
  imagePath?: Prisma.StringFilter<"DonationProof"> | string
  imageName?: Prisma.StringFilter<"DonationProof"> | string
  fileSize?: Prisma.IntFilter<"DonationProof"> | number
  uploadedAt?: Prisma.DateTimeFilter<"DonationProof"> | Date | string
  donation?: Prisma.XOR<Prisma.DonationScalarRelationFilter, Prisma.DonationWhereInput>
}, "id">

export type DonationProofOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  donationId?: Prisma.SortOrder
  imagePath?: Prisma.SortOrder
  imageName?: Prisma.SortOrder
  fileSize?: Prisma.SortOrder
  uploadedAt?: Prisma.SortOrder
  _count?: Prisma.DonationProofCountOrderByAggregateInput
  _avg?: Prisma.DonationProofAvgOrderByAggregateInput
  _max?: Prisma.DonationProofMaxOrderByAggregateInput
  _min?: Prisma.DonationProofMinOrderByAggregateInput
  _sum?: Prisma.DonationProofSumOrderByAggregateInput
}

export type DonationProofScalarWhereWithAggregatesInput = {
  AND?: Prisma.DonationProofScalarWhereWithAggregatesInput | Prisma.DonationProofScalarWhereWithAggregatesInput[]
  OR?: Prisma.DonationProofScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DonationProofScalarWhereWithAggregatesInput | Prisma.DonationProofScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"DonationProof"> | string
  donationId?: Prisma.StringWithAggregatesFilter<"DonationProof"> | string
  imagePath?: Prisma.StringWithAggregatesFilter<"DonationProof"> | string
  imageName?: Prisma.StringWithAggregatesFilter<"DonationProof"> | string
  fileSize?: Prisma.IntWithAggregatesFilter<"DonationProof"> | number
  uploadedAt?: Prisma.DateTimeWithAggregatesFilter<"DonationProof"> | Date | string
}

export type DonationProofCreateInput = {
  id?: string
  imagePath: string
  imageName: string
  fileSize: number
  uploadedAt?: Date | string
  donation: Prisma.DonationCreateNestedOneWithoutDonationProofsInput
}

export type DonationProofUncheckedCreateInput = {
  id?: string
  donationId: string
  imagePath: string
  imageName: string
  fileSize: number
  uploadedAt?: Date | string
}

export type DonationProofUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  imagePath?: Prisma.StringFieldUpdateOperationsInput | string
  imageName?: Prisma.StringFieldUpdateOperationsInput | string
  fileSize?: Prisma.IntFieldUpdateOperationsInput | number
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  donation?: Prisma.DonationUpdateOneRequiredWithoutDonationProofsNestedInput
}

export type DonationProofUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  donationId?: Prisma.StringFieldUpdateOperationsInput | string
  imagePath?: Prisma.StringFieldUpdateOperationsInput | string
  imageName?: Prisma.StringFieldUpdateOperationsInput | string
  fileSize?: Prisma.IntFieldUpdateOperationsInput | number
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DonationProofCreateManyInput = {
  id?: string
  donationId: string
  imagePath: string
  imageName: string
  fileSize: number
  uploadedAt?: Date | string
}

export type DonationProofUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  imagePath?: Prisma.StringFieldUpdateOperationsInput | string
  imageName?: Prisma.StringFieldUpdateOperationsInput | string
  fileSize?: Prisma.IntFieldUpdateOperationsInput | number
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DonationProofUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  donationId?: Prisma.StringFieldUpdateOperationsInput | string
  imagePath?: Prisma.StringFieldUpdateOperationsInput | string
  imageName?: Prisma.StringFieldUpdateOperationsInput | string
  fileSize?: Prisma.IntFieldUpdateOperationsInput | number
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DonationProofListRelationFilter = {
  every?: Prisma.DonationProofWhereInput
  some?: Prisma.DonationProofWhereInput
  none?: Prisma.DonationProofWhereInput
}

export type DonationProofOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type DonationProofCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  donationId?: Prisma.SortOrder
  imagePath?: Prisma.SortOrder
  imageName?: Prisma.SortOrder
  fileSize?: Prisma.SortOrder
  uploadedAt?: Prisma.SortOrder
}

export type DonationProofAvgOrderByAggregateInput = {
  fileSize?: Prisma.SortOrder
}

export type DonationProofMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  donationId?: Prisma.SortOrder
  imagePath?: Prisma.SortOrder
  imageName?: Prisma.SortOrder
  fileSize?: Prisma.SortOrder
  uploadedAt?: Prisma.SortOrder
}

export type DonationProofMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  donationId?: Prisma.SortOrder
  imagePath?: Prisma.SortOrder
  imageName?: Prisma.SortOrder
  fileSize?: Prisma.SortOrder
  uploadedAt?: Prisma.SortOrder
}

export type DonationProofSumOrderByAggregateInput = {
  fileSize?: Prisma.SortOrder
}

export type DonationProofCreateNestedManyWithoutDonationInput = {
  create?: Prisma.XOR<Prisma.DonationProofCreateWithoutDonationInput, Prisma.DonationProofUncheckedCreateWithoutDonationInput> | Prisma.DonationProofCreateWithoutDonationInput[] | Prisma.DonationProofUncheckedCreateWithoutDonationInput[]
  connectOrCreate?: Prisma.DonationProofCreateOrConnectWithoutDonationInput | Prisma.DonationProofCreateOrConnectWithoutDonationInput[]
  createMany?: Prisma.DonationProofCreateManyDonationInputEnvelope
  connect?: Prisma.DonationProofWhereUniqueInput | Prisma.DonationProofWhereUniqueInput[]
}

export type DonationProofUncheckedCreateNestedManyWithoutDonationInput = {
  create?: Prisma.XOR<Prisma.DonationProofCreateWithoutDonationInput, Prisma.DonationProofUncheckedCreateWithoutDonationInput> | Prisma.DonationProofCreateWithoutDonationInput[] | Prisma.DonationProofUncheckedCreateWithoutDonationInput[]
  connectOrCreate?: Prisma.DonationProofCreateOrConnectWithoutDonationInput | Prisma.DonationProofCreateOrConnectWithoutDonationInput[]
  createMany?: Prisma.DonationProofCreateManyDonationInputEnvelope
  connect?: Prisma.DonationProofWhereUniqueInput | Prisma.DonationProofWhereUniqueInput[]
}

export type DonationProofUpdateManyWithoutDonationNestedInput = {
  create?: Prisma.XOR<Prisma.DonationProofCreateWithoutDonationInput, Prisma.DonationProofUncheckedCreateWithoutDonationInput> | Prisma.DonationProofCreateWithoutDonationInput[] | Prisma.DonationProofUncheckedCreateWithoutDonationInput[]
  connectOrCreate?: Prisma.DonationProofCreateOrConnectWithoutDonationInput | Prisma.DonationProofCreateOrConnectWithoutDonationInput[]
  upsert?: Prisma.DonationProofUpsertWithWhereUniqueWithoutDonationInput | Prisma.DonationProofUpsertWithWhereUniqueWithoutDonationInput[]
  createMany?: Prisma.DonationProofCreateManyDonationInputEnvelope
  set?: Prisma.DonationProofWhereUniqueInput | Prisma.DonationProofWhereUniqueInput[]
  disconnect?: Prisma.DonationProofWhereUniqueInput | Prisma.DonationProofWhereUniqueInput[]
  delete?: Prisma.DonationProofWhereUniqueInput | Prisma.DonationProofWhereUniqueInput[]
  connect?: Prisma.DonationProofWhereUniqueInput | Prisma.DonationProofWhereUniqueInput[]
  update?: Prisma.DonationProofUpdateWithWhereUniqueWithoutDonationInput | Prisma.DonationProofUpdateWithWhereUniqueWithoutDonationInput[]
  updateMany?: Prisma.DonationProofUpdateManyWithWhereWithoutDonationInput | Prisma.DonationProofUpdateManyWithWhereWithoutDonationInput[]
  deleteMany?: Prisma.DonationProofScalarWhereInput | Prisma.DonationProofScalarWhereInput[]
}

export type DonationProofUncheckedUpdateManyWithoutDonationNestedInput = {
  create?: Prisma.XOR<Prisma.DonationProofCreateWithoutDonationInput, Prisma.DonationProofUncheckedCreateWithoutDonationInput> | Prisma.DonationProofCreateWithoutDonationInput[] | Prisma.DonationProofUncheckedCreateWithoutDonationInput[]
  connectOrCreate?: Prisma.DonationProofCreateOrConnectWithoutDonationInput | Prisma.DonationProofCreateOrConnectWithoutDonationInput[]
  upsert?: Prisma.DonationProofUpsertWithWhereUniqueWithoutDonationInput | Prisma.DonationProofUpsertWithWhereUniqueWithoutDonationInput[]
  createMany?: Prisma.DonationProofCreateManyDonationInputEnvelope
  set?: Prisma.DonationProofWhereUniqueInput | Prisma.DonationProofWhereUniqueInput[]
  disconnect?: Prisma.DonationProofWhereUniqueInput | Prisma.DonationProofWhereUniqueInput[]
  delete?: Prisma.DonationProofWhereUniqueInput | Prisma.DonationProofWhereUniqueInput[]
  connect?: Prisma.DonationProofWhereUniqueInput | Prisma.DonationProofWhereUniqueInput[]
  update?: Prisma.DonationProofUpdateWithWhereUniqueWithoutDonationInput | Prisma.DonationProofUpdateWithWhereUniqueWithoutDonationInput[]
  updateMany?: Prisma.DonationProofUpdateManyWithWhereWithoutDonationInput | Prisma.DonationProofUpdateManyWithWhereWithoutDonationInput[]
  deleteMany?: Prisma.DonationProofScalarWhereInput | Prisma.DonationProofScalarWhereInput[]
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type DonationProofCreateWithoutDonationInput = {
  id?: string
  imagePath: string
  imageName: string
  fileSize: number
  uploadedAt?: Date | string
}

export type DonationProofUncheckedCreateWithoutDonationInput = {
  id?: string
  imagePath: string
  imageName: string
  fileSize: number
  uploadedAt?: Date | string
}

export type DonationProofCreateOrConnectWithoutDonationInput = {
  where: Prisma.DonationProofWhereUniqueInput
  create: Prisma.XOR<Prisma.DonationProofCreateWithoutDonationInput, Prisma.DonationProofUncheckedCreateWithoutDonationInput>
}

export type DonationProofCreateManyDonationInputEnvelope = {
  data: Prisma.DonationProofCreateManyDonationInput | Prisma.DonationProofCreateManyDonationInput[]
  skipDuplicates?: boolean
}

export type DonationProofUpsertWithWhereUniqueWithoutDonationInput = {
  where: Prisma.DonationProofWhereUniqueInput
  update: Prisma.XOR<Prisma.DonationProofUpdateWithoutDonationInput, Prisma.DonationProofUncheckedUpdateWithoutDonationInput>
  create: Prisma.XOR<Prisma.DonationProofCreateWithoutDonationInput, Prisma.DonationProofUncheckedCreateWithoutDonationInput>
}

export type DonationProofUpdateWithWhereUniqueWithoutDonationInput = {
  where: Prisma.DonationProofWhereUniqueInput
  data: Prisma.XOR<Prisma.DonationProofUpdateWithoutDonationInput, Prisma.DonationProofUncheckedUpdateWithoutDonationInput>
}

export type DonationProofUpdateManyWithWhereWithoutDonationInput = {
  where: Prisma.DonationProofScalarWhereInput
  data: Prisma.XOR<Prisma.DonationProofUpdateManyMutationInput, Prisma.DonationProofUncheckedUpdateManyWithoutDonationInput>
}

export type DonationProofScalarWhereInput = {
  AND?: Prisma.DonationProofScalarWhereInput | Prisma.DonationProofScalarWhereInput[]
  OR?: Prisma.DonationProofScalarWhereInput[]
  NOT?: Prisma.DonationProofScalarWhereInput | Prisma.DonationProofScalarWhereInput[]
  id?: Prisma.StringFilter<"DonationProof"> | string
  donationId?: Prisma.StringFilter<"DonationProof"> | string
  imagePath?: Prisma.StringFilter<"DonationProof"> | string
  imageName?: Prisma.StringFilter<"DonationProof"> | string
  fileSize?: Prisma.IntFilter<"DonationProof"> | number
  uploadedAt?: Prisma.DateTimeFilter<"DonationProof"> | Date | string
}

export type DonationProofCreateManyDonationInput = {
  id?: string
  imagePath: string
  imageName: string
  fileSize: number
  uploadedAt?: Date | string
}

export type DonationProofUpdateWithoutDonationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  imagePath?: Prisma.StringFieldUpdateOperationsInput | string
  imageName?: Prisma.StringFieldUpdateOperationsInput | string
  fileSize?: Prisma.IntFieldUpdateOperationsInput | number
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DonationProofUncheckedUpdateWithoutDonationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  imagePath?: Prisma.StringFieldUpdateOperationsInput | string
  imageName?: Prisma.StringFieldUpdateOperationsInput | string
  fileSize?: Prisma.IntFieldUpdateOperationsInput | number
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DonationProofUncheckedUpdateManyWithoutDonationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  imagePath?: Prisma.StringFieldUpdateOperationsInput | string
  imageName?: Prisma.StringFieldUpdateOperationsInput | string
  fileSize?: Prisma.IntFieldUpdateOperationsInput | number
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type DonationProofSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  donationId?: boolean
  imagePath?: boolean
  imageName?: boolean
  fileSize?: boolean
  uploadedAt?: boolean
  donation?: boolean | Prisma.DonationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["donationProof"]>

export type DonationProofSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  donationId?: boolean
  imagePath?: boolean
  imageName?: boolean
  fileSize?: boolean
  uploadedAt?: boolean
  donation?: boolean | Prisma.DonationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["donationProof"]>

export type DonationProofSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  donationId?: boolean
  imagePath?: boolean
  imageName?: boolean
  fileSize?: boolean
  uploadedAt?: boolean
  donation?: boolean | Prisma.DonationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["donationProof"]>

export type DonationProofSelectScalar = {
  id?: boolean
  donationId?: boolean
  imagePath?: boolean
  imageName?: boolean
  fileSize?: boolean
  uploadedAt?: boolean
}

export type DonationProofOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "donationId" | "imagePath" | "imageName" | "fileSize" | "uploadedAt", ExtArgs["result"]["donationProof"]>
export type DonationProofInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  donation?: boolean | Prisma.DonationDefaultArgs<ExtArgs>
}
export type DonationProofIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  donation?: boolean | Prisma.DonationDefaultArgs<ExtArgs>
}
export type DonationProofIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  donation?: boolean | Prisma.DonationDefaultArgs<ExtArgs>
}

export type $DonationProofPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "DonationProof"
  objects: {
    donation: Prisma.$DonationPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    donationId: string
    imagePath: string
    imageName: string
    fileSize: number
    uploadedAt: Date
  }, ExtArgs["result"]["donationProof"]>
  composites: {}
}

export type DonationProofGetPayload<S extends boolean | null | undefined | DonationProofDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DonationProofPayload, S>

export type DonationProofCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DonationProofFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DonationProofCountAggregateInputType | true
  }

export interface DonationProofDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DonationProof'], meta: { name: 'DonationProof' } }
  /**
   * Find zero or one DonationProof that matches the filter.
   * @param {DonationProofFindUniqueArgs} args - Arguments to find a DonationProof
   * @example
   * // Get one DonationProof
   * const donationProof = await prisma.donationProof.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DonationProofFindUniqueArgs>(args: Prisma.SelectSubset<T, DonationProofFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DonationProofClient<runtime.Types.Result.GetResult<Prisma.$DonationProofPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one DonationProof that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DonationProofFindUniqueOrThrowArgs} args - Arguments to find a DonationProof
   * @example
   * // Get one DonationProof
   * const donationProof = await prisma.donationProof.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DonationProofFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DonationProofFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DonationProofClient<runtime.Types.Result.GetResult<Prisma.$DonationProofPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DonationProof that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DonationProofFindFirstArgs} args - Arguments to find a DonationProof
   * @example
   * // Get one DonationProof
   * const donationProof = await prisma.donationProof.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DonationProofFindFirstArgs>(args?: Prisma.SelectSubset<T, DonationProofFindFirstArgs<ExtArgs>>): Prisma.Prisma__DonationProofClient<runtime.Types.Result.GetResult<Prisma.$DonationProofPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DonationProof that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DonationProofFindFirstOrThrowArgs} args - Arguments to find a DonationProof
   * @example
   * // Get one DonationProof
   * const donationProof = await prisma.donationProof.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DonationProofFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DonationProofFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DonationProofClient<runtime.Types.Result.GetResult<Prisma.$DonationProofPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more DonationProofs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DonationProofFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DonationProofs
   * const donationProofs = await prisma.donationProof.findMany()
   * 
   * // Get first 10 DonationProofs
   * const donationProofs = await prisma.donationProof.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const donationProofWithIdOnly = await prisma.donationProof.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DonationProofFindManyArgs>(args?: Prisma.SelectSubset<T, DonationProofFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DonationProofPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a DonationProof.
   * @param {DonationProofCreateArgs} args - Arguments to create a DonationProof.
   * @example
   * // Create one DonationProof
   * const DonationProof = await prisma.donationProof.create({
   *   data: {
   *     // ... data to create a DonationProof
   *   }
   * })
   * 
   */
  create<T extends DonationProofCreateArgs>(args: Prisma.SelectSubset<T, DonationProofCreateArgs<ExtArgs>>): Prisma.Prisma__DonationProofClient<runtime.Types.Result.GetResult<Prisma.$DonationProofPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many DonationProofs.
   * @param {DonationProofCreateManyArgs} args - Arguments to create many DonationProofs.
   * @example
   * // Create many DonationProofs
   * const donationProof = await prisma.donationProof.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DonationProofCreateManyArgs>(args?: Prisma.SelectSubset<T, DonationProofCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many DonationProofs and returns the data saved in the database.
   * @param {DonationProofCreateManyAndReturnArgs} args - Arguments to create many DonationProofs.
   * @example
   * // Create many DonationProofs
   * const donationProof = await prisma.donationProof.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many DonationProofs and only return the `id`
   * const donationProofWithIdOnly = await prisma.donationProof.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DonationProofCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DonationProofCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DonationProofPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a DonationProof.
   * @param {DonationProofDeleteArgs} args - Arguments to delete one DonationProof.
   * @example
   * // Delete one DonationProof
   * const DonationProof = await prisma.donationProof.delete({
   *   where: {
   *     // ... filter to delete one DonationProof
   *   }
   * })
   * 
   */
  delete<T extends DonationProofDeleteArgs>(args: Prisma.SelectSubset<T, DonationProofDeleteArgs<ExtArgs>>): Prisma.Prisma__DonationProofClient<runtime.Types.Result.GetResult<Prisma.$DonationProofPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one DonationProof.
   * @param {DonationProofUpdateArgs} args - Arguments to update one DonationProof.
   * @example
   * // Update one DonationProof
   * const donationProof = await prisma.donationProof.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DonationProofUpdateArgs>(args: Prisma.SelectSubset<T, DonationProofUpdateArgs<ExtArgs>>): Prisma.Prisma__DonationProofClient<runtime.Types.Result.GetResult<Prisma.$DonationProofPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more DonationProofs.
   * @param {DonationProofDeleteManyArgs} args - Arguments to filter DonationProofs to delete.
   * @example
   * // Delete a few DonationProofs
   * const { count } = await prisma.donationProof.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DonationProofDeleteManyArgs>(args?: Prisma.SelectSubset<T, DonationProofDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DonationProofs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DonationProofUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DonationProofs
   * const donationProof = await prisma.donationProof.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DonationProofUpdateManyArgs>(args: Prisma.SelectSubset<T, DonationProofUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DonationProofs and returns the data updated in the database.
   * @param {DonationProofUpdateManyAndReturnArgs} args - Arguments to update many DonationProofs.
   * @example
   * // Update many DonationProofs
   * const donationProof = await prisma.donationProof.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more DonationProofs and only return the `id`
   * const donationProofWithIdOnly = await prisma.donationProof.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DonationProofUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DonationProofUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DonationProofPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one DonationProof.
   * @param {DonationProofUpsertArgs} args - Arguments to update or create a DonationProof.
   * @example
   * // Update or create a DonationProof
   * const donationProof = await prisma.donationProof.upsert({
   *   create: {
   *     // ... data to create a DonationProof
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the DonationProof we want to update
   *   }
   * })
   */
  upsert<T extends DonationProofUpsertArgs>(args: Prisma.SelectSubset<T, DonationProofUpsertArgs<ExtArgs>>): Prisma.Prisma__DonationProofClient<runtime.Types.Result.GetResult<Prisma.$DonationProofPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of DonationProofs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DonationProofCountArgs} args - Arguments to filter DonationProofs to count.
   * @example
   * // Count the number of DonationProofs
   * const count = await prisma.donationProof.count({
   *   where: {
   *     // ... the filter for the DonationProofs we want to count
   *   }
   * })
  **/
  count<T extends DonationProofCountArgs>(
    args?: Prisma.Subset<T, DonationProofCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DonationProofCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a DonationProof.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DonationProofAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DonationProofAggregateArgs>(args: Prisma.Subset<T, DonationProofAggregateArgs>): Prisma.PrismaPromise<GetDonationProofAggregateType<T>>

  /**
   * Group by DonationProof.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DonationProofGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DonationProofGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DonationProofGroupByArgs['orderBy'] }
      : { orderBy?: DonationProofGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DonationProofGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDonationProofGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the DonationProof model
 */
readonly fields: DonationProofFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for DonationProof.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DonationProofClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  donation<T extends Prisma.DonationDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DonationDefaultArgs<ExtArgs>>): Prisma.Prisma__DonationClient<runtime.Types.Result.GetResult<Prisma.$DonationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the DonationProof model
 */
export interface DonationProofFieldRefs {
  readonly id: Prisma.FieldRef<"DonationProof", 'String'>
  readonly donationId: Prisma.FieldRef<"DonationProof", 'String'>
  readonly imagePath: Prisma.FieldRef<"DonationProof", 'String'>
  readonly imageName: Prisma.FieldRef<"DonationProof", 'String'>
  readonly fileSize: Prisma.FieldRef<"DonationProof", 'Int'>
  readonly uploadedAt: Prisma.FieldRef<"DonationProof", 'DateTime'>
}
    

// Custom InputTypes
/**
 * DonationProof findUnique
 */
export type DonationProofFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DonationProof
   */
  select?: Prisma.DonationProofSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DonationProof
   */
  omit?: Prisma.DonationProofOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonationProofInclude<ExtArgs> | null
  /**
   * Filter, which DonationProof to fetch.
   */
  where: Prisma.DonationProofWhereUniqueInput
}

/**
 * DonationProof findUniqueOrThrow
 */
export type DonationProofFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DonationProof
   */
  select?: Prisma.DonationProofSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DonationProof
   */
  omit?: Prisma.DonationProofOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonationProofInclude<ExtArgs> | null
  /**
   * Filter, which DonationProof to fetch.
   */
  where: Prisma.DonationProofWhereUniqueInput
}

/**
 * DonationProof findFirst
 */
export type DonationProofFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DonationProof
   */
  select?: Prisma.DonationProofSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DonationProof
   */
  omit?: Prisma.DonationProofOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonationProofInclude<ExtArgs> | null
  /**
   * Filter, which DonationProof to fetch.
   */
  where?: Prisma.DonationProofWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DonationProofs to fetch.
   */
  orderBy?: Prisma.DonationProofOrderByWithRelationInput | Prisma.DonationProofOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DonationProofs.
   */
  cursor?: Prisma.DonationProofWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DonationProofs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DonationProofs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DonationProofs.
   */
  distinct?: Prisma.DonationProofScalarFieldEnum | Prisma.DonationProofScalarFieldEnum[]
}

/**
 * DonationProof findFirstOrThrow
 */
export type DonationProofFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DonationProof
   */
  select?: Prisma.DonationProofSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DonationProof
   */
  omit?: Prisma.DonationProofOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonationProofInclude<ExtArgs> | null
  /**
   * Filter, which DonationProof to fetch.
   */
  where?: Prisma.DonationProofWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DonationProofs to fetch.
   */
  orderBy?: Prisma.DonationProofOrderByWithRelationInput | Prisma.DonationProofOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DonationProofs.
   */
  cursor?: Prisma.DonationProofWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DonationProofs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DonationProofs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DonationProofs.
   */
  distinct?: Prisma.DonationProofScalarFieldEnum | Prisma.DonationProofScalarFieldEnum[]
}

/**
 * DonationProof findMany
 */
export type DonationProofFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DonationProof
   */
  select?: Prisma.DonationProofSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DonationProof
   */
  omit?: Prisma.DonationProofOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonationProofInclude<ExtArgs> | null
  /**
   * Filter, which DonationProofs to fetch.
   */
  where?: Prisma.DonationProofWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DonationProofs to fetch.
   */
  orderBy?: Prisma.DonationProofOrderByWithRelationInput | Prisma.DonationProofOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing DonationProofs.
   */
  cursor?: Prisma.DonationProofWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DonationProofs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DonationProofs.
   */
  skip?: number
  distinct?: Prisma.DonationProofScalarFieldEnum | Prisma.DonationProofScalarFieldEnum[]
}

/**
 * DonationProof create
 */
export type DonationProofCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DonationProof
   */
  select?: Prisma.DonationProofSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DonationProof
   */
  omit?: Prisma.DonationProofOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonationProofInclude<ExtArgs> | null
  /**
   * The data needed to create a DonationProof.
   */
  data: Prisma.XOR<Prisma.DonationProofCreateInput, Prisma.DonationProofUncheckedCreateInput>
}

/**
 * DonationProof createMany
 */
export type DonationProofCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many DonationProofs.
   */
  data: Prisma.DonationProofCreateManyInput | Prisma.DonationProofCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * DonationProof createManyAndReturn
 */
export type DonationProofCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DonationProof
   */
  select?: Prisma.DonationProofSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DonationProof
   */
  omit?: Prisma.DonationProofOmit<ExtArgs> | null
  /**
   * The data used to create many DonationProofs.
   */
  data: Prisma.DonationProofCreateManyInput | Prisma.DonationProofCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonationProofIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * DonationProof update
 */
export type DonationProofUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DonationProof
   */
  select?: Prisma.DonationProofSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DonationProof
   */
  omit?: Prisma.DonationProofOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonationProofInclude<ExtArgs> | null
  /**
   * The data needed to update a DonationProof.
   */
  data: Prisma.XOR<Prisma.DonationProofUpdateInput, Prisma.DonationProofUncheckedUpdateInput>
  /**
   * Choose, which DonationProof to update.
   */
  where: Prisma.DonationProofWhereUniqueInput
}

/**
 * DonationProof updateMany
 */
export type DonationProofUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update DonationProofs.
   */
  data: Prisma.XOR<Prisma.DonationProofUpdateManyMutationInput, Prisma.DonationProofUncheckedUpdateManyInput>
  /**
   * Filter which DonationProofs to update
   */
  where?: Prisma.DonationProofWhereInput
  /**
   * Limit how many DonationProofs to update.
   */
  limit?: number
}

/**
 * DonationProof updateManyAndReturn
 */
export type DonationProofUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DonationProof
   */
  select?: Prisma.DonationProofSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DonationProof
   */
  omit?: Prisma.DonationProofOmit<ExtArgs> | null
  /**
   * The data used to update DonationProofs.
   */
  data: Prisma.XOR<Prisma.DonationProofUpdateManyMutationInput, Prisma.DonationProofUncheckedUpdateManyInput>
  /**
   * Filter which DonationProofs to update
   */
  where?: Prisma.DonationProofWhereInput
  /**
   * Limit how many DonationProofs to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonationProofIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * DonationProof upsert
 */
export type DonationProofUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DonationProof
   */
  select?: Prisma.DonationProofSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DonationProof
   */
  omit?: Prisma.DonationProofOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonationProofInclude<ExtArgs> | null
  /**
   * The filter to search for the DonationProof to update in case it exists.
   */
  where: Prisma.DonationProofWhereUniqueInput
  /**
   * In case the DonationProof found by the `where` argument doesn't exist, create a new DonationProof with this data.
   */
  create: Prisma.XOR<Prisma.DonationProofCreateInput, Prisma.DonationProofUncheckedCreateInput>
  /**
   * In case the DonationProof was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DonationProofUpdateInput, Prisma.DonationProofUncheckedUpdateInput>
}

/**
 * DonationProof delete
 */
export type DonationProofDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DonationProof
   */
  select?: Prisma.DonationProofSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DonationProof
   */
  omit?: Prisma.DonationProofOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonationProofInclude<ExtArgs> | null
  /**
   * Filter which DonationProof to delete.
   */
  where: Prisma.DonationProofWhereUniqueInput
}

/**
 * DonationProof deleteMany
 */
export type DonationProofDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DonationProofs to delete
   */
  where?: Prisma.DonationProofWhereInput
  /**
   * Limit how many DonationProofs to delete.
   */
  limit?: number
}

/**
 * DonationProof without action
 */
export type DonationProofDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DonationProof
   */
  select?: Prisma.DonationProofSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DonationProof
   */
  omit?: Prisma.DonationProofOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonationProofInclude<ExtArgs> | null
}
